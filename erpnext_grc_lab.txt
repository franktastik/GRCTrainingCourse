# Root Terraform module for GRC Lab with ERPNext on AWS

# ----------------------------
# PROVIDER CONFIGURATION
# ----------------------------
provider "aws" {
  region = var.aws_region
}

# ----------------------------
# NETWORKING
# ----------------------------
module "vpc" {
  source  = "terraform-aws-modules/vpc/aws"
  version = "3.19.0"

  name = "erpnext-grc-vpc"
  cidr = "10.0.0.0/16"

  azs             = ["${var.aws_region}a", "${var.aws_region}b"]
  public_subnets  = ["10.0.1.0/24", "10.0.2.0/24"]
  private_subnets = ["10.0.3.0/24", "10.0.4.0/24"]

  enable_dns_hostnames = true
  enable_dns_support   = true

  tags = {
    Environment = var.environment
    Project     = "erpnext-grc"
  }
}

# ----------------------------
# SECURITY GROUP
# ----------------------------
resource "aws_security_group" "erpnext_sg" {
  name        = "erpnext-sg"
  description = "Allow HTTP, HTTPS, SSH"
  vpc_id      = module.vpc.vpc_id

  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    from_port   = 443
    to_port     = 443
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }

  tags = {
    Name = "erpnext-sg"
  }
}

# ----------------------------
# EC2 INSTANCE FOR ERPNext
# ----------------------------
resource "aws_instance" "erpnext" {
  ami                    = var.ec2_ami
  instance_type          = var.ec2_instance_type
  subnet_id              = module.vpc.public_subnets[0]
  vpc_security_group_ids = [aws_security_group.erpnext_sg.id]
  key_name               = var.key_pair_name

  associate_public_ip_address = true

  tags = {
    Name = "erpnext-server"
  }

  provisioner "remote-exec" {
    inline = [
      "sudo apt update -y",
      "sudo apt install -y python3 python3-pip git",
      "sudo apt install -y ansible"
    ]

    connection {
      type        = "ssh"
      user        = "ubuntu"
      private_key = file(var.private_key_path)
      host        = self.public_ip
    }
  }
}

# ----------------------------
# RDS MARIADB INSTANCE
# ----------------------------
module "db" {
  source  = "terraform-aws-modules/rds/aws"
  version = "6.1.0"

  identifier = "erpnext-db"
  engine     = "mariadb"
  engine_version = "10.5"
  instance_class = "db.t3.micro"
  allocated_storage = 20

  name     = var.db_name
  username = var.db_username
  password = var.db_password
  port     = 3306

  publicly_accessible = false
  vpc_security_group_ids = [aws_security_group.erpnext_sg.id]
  subnet_ids = module.vpc.private_subnets

  tags = {
    Environment = var.environment
    Project     = "erpnext-grc"
  }
}

# ----------------------------
# OUTPUTS
# ----------------------------
output "erpnext_public_ip" {
  value = aws_instance.erpnext.public_ip
}

output "rds_endpoint" {
  value = module.db.db_instance_endpoint
}

# ----------------------------
# NEXT STEPS
# ----------------------------
# After 'terraform apply', use the public_ip output to SSH into the EC2 instance
# Then run the following Ansible playbook to install ERPNext:
#
# ansible-playbook -i '<PUBLIC_IP>,' --private-key <your-key.pem> setup_erpnext.yml
